use anyhow::{anyhow, Result};
use ecdsa::signature::Verifier;
use ecdsa::{Signature, VerifyingKey};
use p256::pkcs8::FromPublicKey;

pub(crate) type CosignVerificationKey = VerifyingKey<p256::NistP256>;

/// Create a new Cosign Verification Key starting from the contents of
/// a cosign public key.
pub(crate) fn new_verification_key(contents: &str) -> Result<CosignVerificationKey> {
    VerifyingKey::<p256::NistP256>::from_public_key_pem(contents)
        .map_err(|e| anyhow!("Cannot load key: {:?}", e))
}

/// Verify the signature provided has been actually generated by the given key against the
/// when signing the provided message.
pub(crate) fn verify_signature(
    verification_key: &CosignVerificationKey,
    signature_str: &str,
    msg: &[u8],
) -> Result<()> {
    let signature_raw = base64::decode(signature_str)?;
    let signature = Signature::<p256::NistP256>::from_der(&signature_raw)?;
    verification_key
        .verify(msg, &signature)
        .map_err(|e| anyhow!("Verification failed: {:?}", e))
}

#[cfg(test)]
mod tests {
    use super::*;

    const PUBLIC_KEY: &str = r#"-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAENptdY/l3nB0yqkXLBWkZWQwo6+cu
OSWS1X9vPavpiQOoTTGC0xX57OojUadxF1cdQmrsiReWg2Wn4FneJfa8xw==
-----END PUBLIC KEY-----"#;

    #[test]
    fn verify_signature_success() {
        let signature = String::from("MEUCIQD6q/COgzOyW0YH1Dk+CCYSt4uAhm3FDHUwvPI55zwnlwIgE0ZK58ZOWpZw8YVmBapJhBqCfdPekIknimuO0xH8Jh8=");
        let verification_key = new_verification_key(PUBLIC_KEY).unwrap();
        let msg = r#"{"critical":{"identity":{"docker-reference":"registry-testing.svc.lan/busybox"},"image":{"docker-manifest-digest":"sha256:f3cfc9d0dbf931d3db4685ec659b7ac68e2a578219da4aae65427886e649b06b"},"type":"cosign container image signature"},"optional":null}"#;

        let outcome = verify_signature(&verification_key, &signature, &msg.as_bytes());
        assert!(outcome.is_ok());
    }

    #[test]
    fn verify_signature_failure_because_wrong_msg() {
        let signature = String::from("MEUCIQD6q/COgzOyW0YH1Dk+CCYSt4uAhm3FDHUwvPI55zwnlwIgE0ZK58ZOWpZw8YVmBapJhBqCfdPekIknimuO0xH8Jh8=");
        let verification_key = new_verification_key(PUBLIC_KEY).unwrap();
        let msg = "hello world";

        let outcome = verify_signature(&verification_key, &signature, &msg.as_bytes());
        assert!(outcome.is_err());
    }

    #[test]
    fn verify_signature_failure_because_wrong_signature() {
        let signature = String::from("this is a signature");
        let verification_key = new_verification_key(PUBLIC_KEY).unwrap();
        let msg = r#"{"critical":{"identity":{"docker-reference":"registry-testing.svc.lan/busybox"},"image":{"docker-manifest-digest":"sha256:f3cfc9d0dbf931d3db4685ec659b7ac68e2a578219da4aae65427886e649b06b"},"type":"cosign container image signature"},"optional":null}"#;

        let outcome = verify_signature(&verification_key, &signature, &msg.as_bytes());
        assert!(outcome.is_err());
    }

    #[test]
    fn verify_signature_failure_because_wrong_verification_key() {
        let signature = String::from("MEUCIQD6q/COgzOyW0YH1Dk+CCYSt4uAhm3FDHUwvPI55zwnlwIgE0ZK58ZOWpZw8YVmBapJhBqCfdPekIknimuO0xH8Jh8=");

        let verification_key = new_verification_key(
            r#"-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETJP9cqpUQsn2ggmJniWGjHdlsHzD
JsB89BPhZYch0U0hKANx5TY+ncrm0s8bfJxxHoenAEFhwhuXeb4PqIrtoQ==
-----END PUBLIC KEY-----"#,
        )
        .unwrap();
        let msg = r#"{"critical":{"identity":{"docker-reference":"registry-testing.svc.lan/busybox"},"image":{"docker-manifest-digest":"sha256:f3cfc9d0dbf931d3db4685ec659b7ac68e2a578219da4aae65427886e649b06b"},"type":"cosign container image signature"},"optional":null}"#;

        let outcome = verify_signature(&verification_key, &signature, &msg.as_bytes());
        assert!(outcome.is_err());
    }
}
