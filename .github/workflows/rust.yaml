name: rust

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.5.11
  SQLX_FEATURES: postgres,rustls

jobs:
  fmt:
    name: fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  lint:
    name: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: >
            sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_FEATURES }}
            --no-default-features

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  test:
    name: test
    runs-on: ubuntu-latest
    needs:
      - fmt
      - lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v1

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: >
            sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_FEATURES }}
            --no-default-features

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Check sqlx-data.json is up-to-date
        run: |
          DB_USER=${POSTGRES_USER:=postgres}
          DB_PASSWORD="${POSTGRES_PASSWORD:=password}"
          DB_NAME="${POSTGRES_DB:=swu}"
          DB_PORT="${POSTGRES_PORT:=5432}"
          cargo sqlx prepare --database-url postgres://${DB_USER}:${DB_PASSWORD}@localhost:${DB_PORT}/${DB_NAME} --check -- --lib

      - name: Run test and get coverage
        id: test
        run: cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs:
      - test
    environment: production
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Generate Image Tag
        id: tag
        run: echo "::set-output name=sha::sha-${GITHUB_SHA::7}"

      - name: Docker Image Metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            registry.digitalocean.com/stand-with-ukraine/app
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Login to digitalocean docker registry
        id: docker-auth
        run: |
          doctl registry login --expiry-seconds 1200

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          target: runtime
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Update Deployment
        env:
          DIGITALOCEAN_APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}
          SPEC_FILE: 'deployment.yaml'
          PATTERN: 's/tag: sha\-[a-z0-9]*$/tag: ${{ steps.tag.outputs.sha }}/g'
        run: |
          echo "::add-mask::${{ secrets.APP__APPLICATION__JWT_TOKEN }}" 
          echo "::add-mask::${{ secrets.APP__BIGCOMMERCE__CLIENT_ID }}" 
          echo "::add-mask::${{ secrets.APP__BIGCOMMERCE__CLIENT_SECRET }}" 
          doctl apps spec get $DIGITALOCEAN_APP_ID > $SPEC_FILE
          sed -i "${PATTERN}" $SPEC_FILE
          doctl apps spec validate $SPEC_FILE
          doctl apps update $DIGITALOCEAN_APP_ID --spec $SPEC_FILE
