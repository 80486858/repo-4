name: Main

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types:
      - created

jobs:

  build:
    strategy:
      matrix:
        go-version: [1.13, 1.14, latest]

    name: Test
    runs-on: ubuntu-latest
    container: golang:${{ matrix.go-version }}

    services:
      postgres:
        image: postgres:9.6-alpine
        ports:
          - "5432"
        volumes:
          - ./docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbit:
        image: rabbitmq:3.6-management-alpine
        ports:
          - "5672"
          - "15672"

      redis:
        image: redis:3.2-alpine
        ports:
          - "6379"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongo:
        image: mongo:3
        ports:
          - "27017"

      mysql:
        image: mysql:5.7
        ports:
          - "3306"
        volumes:
          - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      http:
        image: pierreprinetti/apimock:latest
        ports:
          - "8080"
        env:
          HOST: ":8080"

    steps:

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install dependencies
        run: make deps

      - name: Check code quality
        if: success()
        run: make code-quality

      - name: Run tests
        if: success()
        run: go test -cover ./... -coverprofile=coverage.txt -covermode=atomic
        env:
          HEALTH_GO_PG_DSN: postgres://test:test@postgres:${{ job.services.postgres.ports[5432] }}/test?sslmode=disable
          HEALTH_GO_MQ_DSN: amqp://guest:guest@rabbit:${{ job.services.rabbit.ports[5672] }}/
          HEALTH_GO_MQ_URL: http://guest:guest@rabbit:${{ job.services.rabbit.ports[15672] }}/
          HEALTH_GO_RD_DSN: redis://redis:${{ job.services.redis.ports[6379] }}/
          HEALTH_GO_MG_DSN: mongodb://mongo:${{ job.services.mongo.ports[27017] }}/
          HEALTH_GO_MS_DSN: test:test@tcp(mysql:${{ job.services.mysql.ports[3306] }})/test?charset=utf8
          HEALTH_GO_HTTP_URL: http://http:${{ job.services.http.ports[8080] }}/status

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        if: success() && matrix.go-version == 'latest'
        with:
          file: ./coverage.txt
          fail_ci_if_error: false
