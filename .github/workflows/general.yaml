name: Rust

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.5.11
  SQLX_DATABASE: postgres
  SQLX_TLS: rustls

jobs:
  fmt:
    name: fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  lint:
    name: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          toolchain: stable
          override: true

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_DATABASE }}-${{ env.SQLX_TLS }}

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_DATABASE }},${{ env.SQLX_TLS }}
            --no-default-features
            --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  test:
    name: test
    runs-on: ubuntu-latest
    needs:
      - fmt
      - lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
            ~/.cargo/bin/cargo-sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_DATABASE }}-${{ env.SQLX_TLS }}

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_DATABASE }},${{ env.SQLX_TLS }}
            --no-default-features
            --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Check sqlx-data.json is up-to-date
        run: |
          DB_USER=${POSTGRES_USER:=postgres}
          DB_PASSWORD="${POSTGRES_PASSWORD:=password}"
          DB_NAME="${POSTGRES_DB:=swu}"
          DB_PORT="${POSTGRES_PORT:=5432}"
          cargo sqlx prepare --database-url postgres://${DB_USER}:${DB_PASSWORD}@localhost:${DB_PORT}/${DB_NAME} --check -- --lib

      - name: Run cargo test
        id: test
        uses: actions-rs/cargo@v1
        with:
          command: test

  # deploy:
  #   name: Build, Publish, and Deploy
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #   environment: production

  #   permissions:
  #     contents: "read"
  #     id-token: "write"

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - id: auth
  #       name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v0
  #       with:
  #         credentials_json: ${{ secrets.GKE_SA_KEY }}

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v0

  #     - name: Get Docker Access Token
  #       id: docker-auth
  #       run: |
  #         TOKEN=$(gcloud auth print-access-token)
  #         echo ::set-output name=access_token::${TOKEN}

  #     - name: Login Docker
  #       uses: docker/login-action@v1
  #       with:
  #         registry: us.gcr.io
  #         username: oauth2accesstoken
  #         password: ${{ steps.docker-auth.outputs.access_token }}

  #     - name: Configure KubeCtl
  #       uses: google-github-actions/get-gke-credentials@v0
  #       with:
  #         project_id: ${{ secrets.GKE_PROJECT }}
  #         cluster_name: ${{ secrets.GKE_CLUSTER }}
  #         location: ${{ secrets.GKE_ZONE }}

  #     - name: Prepare
  #       id: prep
  #       run: |
  #         TAG=$(echo $GITHUB_SHA | head -c7)
  #         FULL_IMAGE="us.gcr.io/$GCLOUD_PROJECT/$IMAGE"
  #         echo ::set-output name=tagged_image::${FULL_IMAGE}:${TAG}
  #         echo ::set-output name=tag::${TAG}

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1
  #       with:
  #         install: true

  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-multi-buildx

  #     - name: Build production image
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         builder: ${{ steps.buildx.outputs.name }}
  #         target: runtime
  #         push: true
  #         tags: ${{ steps.prep.outputs.tagged_image }}
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

  #     - name: Move cache
  #       run: |
  #         rm -rf /tmp/.buildx-cache
  #         mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  #     - name: Cache Kustomize
  #       uses: actions/cache@v2
  #       id: cache-kustomize
  #       with:
  #         path: |
  #           kustomize
  #         key: ${{ runner.os }}-kustomize-3.1.0

  #     - name: Set up Kustomize
  #       if: steps.cache-kustomize.outputs.cache-hit == false
  #       run: |-
  #         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
  #         chmod u+x ./kustomize

  #     - name: Deploy
  #       env:
  #         FULL_IMAGE: ${{ steps.prep.outputs.tagged_image }}
  #       run: |-
  #         ./kustomize edit set image us.gcr.io/PROJECT/IMAGE:TAG=$FULL_IMAGE
  #         ./kustomize build . | kubectl apply -f -
  #         kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
  #         kubectl get services -o wide -n $NAMESPACE

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs:
      - fmt
      - lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_DATABASE }}-${{ env.SQLX_TLS }}

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_DATABASE }},${{ env.SQLX_TLS }}
            --no-default-features
            --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: "--ignore-tests --avoid-cfg-tarpaulin"
