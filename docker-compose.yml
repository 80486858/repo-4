services:
  polaris:
    build:
      context: .
      network: host
    ports:
      - "8181:8181"
      - "8182"
    environment:
      AWS_REGION: us-west-2
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS
      AZURE_TENANT_ID: $AZURE_TENANT_ID
      AZURE_CLIENT_ID: $AZURE_CLIENT_ID
      AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
    volumes:
      - credentials:/tmp/credentials/

    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
  regtest:
    build:
      context: regtests
      network: host
      args:
        POLARIS_HOST: polaris
    depends_on:
      polaris:
        condition: service_healthy
    environment:
      AWS_TEST_ENABLED: $AWS_TEST_ENABLED
      AWS_STORAGE_BUCKET: $AWS_STORAGE_BUCKET
      AWS_ROLE_ARN: $AWS_ROLE_ARN
      AWS_TEST_BASE: $AWS_TEST_BASE
      GCS_TEST_ENABLED: $GCS_TEST_ENABLED
      GCS_TEST_BASE: $GCS_TEST_BASE
      GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS
      AZURE_TEST_ENABLED: $AZURE_TEST_ENABLED
      AZURE_TENANT_ID: $AZURE_TENANT_ID
      AZURE_DFS_TEST_BASE: $AZURE_DFS_TEST_BASE
      AZURE_BLOB_TEST_BASE: $AZURE_BLOB_TEST_BASE
      AZURE_CLIENT_ID: $AZURE_CLIENT_ID
      AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
      AWS_CROSS_REGION_TEST_ENABLED: $AWS_CROSS_REGION_TEST_ENABLED
      AWS_CROSS_REGION_BUCKET: $AWS_CROSS_REGION_BUCKET
      AWS_ROLE_FOR_CROSS_REGION_BUCKET: $AWS_ROLE_FOR_CROSS_REGION_BUCKET
    volumes:
      - local_output:/tmp/polaris-regtests/
      - credentials:/tmp/credentials/

volumes:
  local_output:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./regtests/output
  credentials:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./regtests/credentials
