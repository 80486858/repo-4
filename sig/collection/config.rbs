module RBS
  module Collection
    # This class represent the configuration file.
    class Config
      class CollectionNotAvailable < StandardError
        def initialize: () -> void
      end

      PATH: Pathname

      type gem_entry = {
        'name' => String,
        'version' => String?,
        'ignore' => boolish,
        'source' => Sources::source_entry?
      }

      @config_path: Pathname

      @data: untyped

      @sources: Array[Sources::_Source]

      def self.find_config_path: () -> Pathname?

      def self.generate_lockfile: (config_path: Pathname, gemfile_lock_path: Pathname, ?with_lockfile: boolish) -> Config

      def self.from_path: (Pathname path) -> Config

      def self.lockfile_of: (Pathname config_path) -> Config?

      def self.to_lockfile_path: (Pathname config_path) -> Pathname

      # config_path is necessary to resolve relative repo_path
      def initialize: (untyped data, config_path: Pathname) -> void

      def add_gem: (gem_entry gem) -> void

      def gem: (String gem_name) -> gem_entry?

      def repo_path: () -> Pathname

      def sources: () -> Array[Sources::_Source]

      def dump_to: (Pathname) -> void

      def gems: () -> Array[gem_entry]

      def gemfile_lock_path=: (Pathname) -> Pathname

      def gemfile_lock_path: () -> Pathname?

      def check_rbs_availability!: () -> void
    end
  end
end
